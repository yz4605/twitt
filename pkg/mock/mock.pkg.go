// Code generated by MockGen. DO NOT EDIT.
// Source: twitt/rpc (interfaces: TwittServiceClient)

// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	rpc "twitt/pkg/rpc"
)

// MockTwittServiceClient is a mock of TwittServiceClient interface
type MockTwittServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTwittServiceClientMockRecorder
}

// MockTwittServiceClientMockRecorder is the mock recorder for MockTwittServiceClient
type MockTwittServiceClientMockRecorder struct {
	mock *MockTwittServiceClient
}

// NewMockTwittServiceClient creates a new mock instance
func NewMockTwittServiceClient(ctrl *gomock.Controller) *MockTwittServiceClient {
	mock := &MockTwittServiceClient{ctrl: ctrl}
	mock.recorder = &MockTwittServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTwittServiceClient) EXPECT() *MockTwittServiceClientMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockTwittServiceClient) Config(arg0 context.Context, arg1 *rpc.ConfigRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Config", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockTwittServiceClientMockRecorder) Config(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockTwittServiceClient)(nil).Config), varargs...)
}

// Follow mocks base method
func (m *MockTwittServiceClient) Follow(arg0 context.Context, arg1 *rpc.FollowingRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Follow", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow
func (mr *MockTwittServiceClientMockRecorder) Follow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockTwittServiceClient)(nil).Follow), varargs...)
}

// GetList mocks base method
func (m *MockTwittServiceClient) GetList(arg0 context.Context, arg1 *rpc.InfoRequest, arg2 ...grpc.CallOption) (*rpc.ListReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetList", varargs...)
	ret0, _ := ret[0].(*rpc.ListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockTwittServiceClientMockRecorder) GetList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockTwittServiceClient)(nil).GetList), varargs...)
}

// Login mocks base method
func (m *MockTwittServiceClient) Login(arg0 context.Context, arg1 *rpc.InfoRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockTwittServiceClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockTwittServiceClient)(nil).Login), varargs...)
}

// Posting mocks base method
func (m *MockTwittServiceClient) Posting(arg0 context.Context, arg1 *rpc.PostRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Posting", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Posting indicates an expected call of Posting
func (mr *MockTwittServiceClientMockRecorder) Posting(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Posting", reflect.TypeOf((*MockTwittServiceClient)(nil).Posting), varargs...)
}

// SignUp mocks base method
func (m *MockTwittServiceClient) SignUp(arg0 context.Context, arg1 *rpc.InfoRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp
func (mr *MockTwittServiceClientMockRecorder) SignUp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockTwittServiceClient)(nil).SignUp), varargs...)
}

// UnFollow mocks base method
func (m *MockTwittServiceClient) UnFollow(arg0 context.Context, arg1 *rpc.FollowingRequest, arg2 ...grpc.CallOption) (*rpc.SuccessReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnFollow", varargs...)
	ret0, _ := ret[0].(*rpc.SuccessReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnFollow indicates an expected call of UnFollow
func (mr *MockTwittServiceClientMockRecorder) UnFollow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollow", reflect.TypeOf((*MockTwittServiceClient)(nil).UnFollow), varargs...)
}

// View mocks base method
func (m *MockTwittServiceClient) View(arg0 context.Context, arg1 *rpc.InfoRequest, arg2 ...grpc.CallOption) (*rpc.ViewReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "View", varargs...)
	ret0, _ := ret[0].(*rpc.ViewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View
func (mr *MockTwittServiceClientMockRecorder) View(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockTwittServiceClient)(nil).View), varargs...)
}
